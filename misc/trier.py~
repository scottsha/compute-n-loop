from __future__ import print_function
from sage.all import *
import os

def matrix_texter(M):
    restrung=''
    b=''
    for a in str(M):
        if a=='[':
            restrung+='{'
        elif a==' ' and ( b==' ' or b=='[' or b==']'):
            restrung+=''
        elif a==' ':
            restrung+=','
        elif a==']':
            restrung+='}'            
        elif a=='\n':
            restrung+=','
        else:
            restrung+=a
        b=a
    restrung='{'+restrung
    restrung=restrung+'}'
    return restrung                        

def vector_texter(M):
    restrung=''
    b=''
    for a in str(M):
        if a=='(':
            restrung+='{'
        elif a==')':
            restrung+='}'            
        else:
            restrung+=a
        b=a
    return restrung    

for dirpath, dirnames, filenames in os.walk('../results/'):
    for filename in [f for f in filenames if f.endswith('.sobj')]:
        txtfilename=filename.replace('.sobj','.txt')
        txtfilepath=os.path.join(dirpath, txtfilename)
        txtfilepath=txtfilepath.replace('/results/','/html/')
        if '/CensusKnots/' in txtfilepath:
            name='Census Knot '+filename.split('_')[0]+'_'+filename.split('_')[1]
            for foo in range(2,10):
                txtfilepath=txtfilepath.replace(str(foo)+'T','0'+str(foo)+'_tetrahedra')
        if '/HTLinkExteriors/' in txtfilepath:
            name='H T Link Exterior '+filename.split('_')[0]
            for foo in range(2,10):
                if 'K'+str(foo) in filename:
                    for bar in range(2,10):
                        txtfilepath=txtfilepath.replace(str(bar)+'T','0'+str(foo)+'_crossings')
                    txtfilepath=txtfilepath.replace('Higher','0'+str(foo)+'_crossings')
        if '/LinkExteriors/' in txtfilepath:
            name='Rolfsen Knot '+filename.split('_')[0]+'_'+filename.split('_')[1]
            txtfilepath=txtfilepath.replace('/LinkExteriors/','/RolfsenKnots/')
            cross_num=filename.split('_')[0]
            for foo in range(2,10):
                txtfilepath=txtfilepath.replace(str(foo)+'T','0'+cross_num+'_crossings')
            txtfilepath=txtfilepath.replace('Higher','0'+cross_num+'_crossings')
        textfile = open(txtfilepath,'w')
        nz = load(os.path.join(dirpath, filename))
        numfield = nz[1][5]
        embedding=nz[1][7]
        shapes = nz[1][6]
        num_tetrahedra=nz[1][1].nrows()
        A = matrix_texter(nz[1][0])
        B = matrix_texter(nz[1][1])
        nu = nz[1][2]
        nu = vector_texter(nu)
        f = nz[1][3]
        f = vector_texter(f)
        fp = nz[1][4]
        fp = vector_texter(fp)
        print('# Manifold: '+name, file=textfile)
        print(file=textfile)
        print('# Number of Tetrahedra: '+str(num_tetrahedra), file=textfile)
        print(file=textfile)    
        print('# Number Field', file=textfile)
        print('%s \n' %str(numfield), file=textfile)
        print('# Approximate Field Generator', file=textfile)
        print(embedding, file=textfile)
        print(file=textfile)
        print('# Shape Parameters', file=textfile)
        for shape in shapes:
            print('%s' %str(shape), file=textfile)
            print(file=textfile)
        print(file=textfile)
        print('# A Gluing Matrix', file=textfile)
        print(A, file=textfile)
        print(file=textfile)
        print('# B Gluing Matrix', file=textfile)
        print(B, file=textfile)
        print(file=textfile)
        print('# nu Gluing Vector', file=textfile)
        print(nu, file=textfile)
        print(file=textfile)
        print('# f Combinatorial flattening', file=textfile)
        print(f, file=textfile)
        print(file=textfile)
        print('# f\' Combinatorial flattening', file=textfile)
        print(fp, file=textfile)
        print(file=textfile)
        for i, invar in enumerate(nz[0]):
            print('# %d Loop Invariant' %(i+1), file=textfile)
            print(invar, file=textfile)
            print(file=textfile)        
        textfile.close()
        

